using System.Collections.Generic;
using System.IO;
using System.Text;
using UnityEditor;
using UnityEditor.Callbacks;
using UnityEngine.Localization.Tables;

static class LocalizationEnumGenetator
{
    /// <summary>
    /// 生成するソースコードのパスを取得する
    /// </summary>
    /// <param name="sharedDataPath"></param>
    /// <param name="tableCollectionName"></param>
    /// <returns></returns>
    internal static string GetSourceFilePath(string sharedDataPath, string tableCollectionName)
    {
        var dir = Path.GetDirectoryName(sharedDataPath);
        return Path.Combine(dir, $"{tableCollectionName}.cs");
    }

    /// <summary>
    /// entriesを元にEnumソースファイルを生成する
    /// </summary>
    /// <param name="sharedDataPath"></param>
    /// <param name="tableCollectionName"></param>
    /// <param name="entries"></param>
    internal static void CreateEnumSourceFile(string sharedDataPath, string tableCollectionName, List<SharedTableData.SharedTableEntry> entries)
    {
        string sourceFilePath = GetSourceFilePath(sharedDataPath, tableCollectionName);
        using (var fileStream = new FileStream(sourceFilePath, FileMode.Create, FileAccess.Write))
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine("// <auto-generated>");
            sb.AppendLine("// Auto-generated code by LocalizationEnumGenetator. DO NOT CHANGE IT.");
            sb.AppendLine($"// Shared Data Path: {sharedDataPath}");
            sb.AppendLine("// </auto-generated>");

            sb.AppendLine();

            sb.AppendLine("using UnityEngine.Localization.Settings;");
            sb.AppendLine("using UnityEngine.Localization.Tables;");

            sb.AppendLine();

            sb.AppendLine("namespace LangTextKey");
            sb.AppendLine("{");
            sb.AppendLine($"    public enum {tableCollectionName} : long");
            sb.AppendLine("    {");

            foreach (var entry in entries)
            {
                sb.AppendLine($"        {entry.Key} = {entry.Id},");
            }
            sb.AppendLine("    }");
            sb.AppendLine("}");

            sb.AppendLine();

            sb.AppendLine("namespace UnityEngine.Localization.Settings");
            sb.AppendLine("{");
            sb.AppendLine($"    public static class {tableCollectionName}LocalizedStringDatabaseExtentions");
            sb.AppendLine("    {");
            sb.AppendLine($"        public static StringTable GetTable(this LocalizedStringDatabase database, LangTextKey.{tableCollectionName} key)");
            sb.AppendLine("         {");
            sb.AppendLine($"            var table = UnityEngine.Localization.Settings.LocalizationSettings.StringDatabase.GetTable(\"{tableCollectionName}\");");
            sb.AppendLine("            return table;");
            sb.AppendLine("        }");
            sb.AppendLine("    }");
            sb.AppendLine();
            sb.AppendLine($"    public static class {tableCollectionName}StringTableExtentions");
            sb.AppendLine("    {");
            sb.AppendLine($"        public static StringTableEntry GetEntry(this StringTable table, LangTextKey.{tableCollectionName} key)");
            sb.AppendLine("        {");
            sb.AppendLine("            var entry = table.GetEntry((long)key);");
            sb.AppendLine("            return entry;");
            sb.AppendLine("        }");
            sb.AppendLine("    }");
            sb.AppendLine("}");
            sb.AppendLine();
            sb.AppendLine("namespace LangTextKey");
            sb.AppendLine("{");
            sb.AppendLine("    public static partial class LangTextKeyUtil");
            sb.AppendLine("    {");
            sb.AppendLine($"        public static string GetLocalizedText(LangTextKey.{tableCollectionName} key)");
            sb.AppendLine("        {");
            sb.AppendLine($"            return LocalizationSettings.StringDatabase.GetTable(key).GetEntry(key).Value;");
            sb.AppendLine("        }");
            sb.AppendLine("    }");
            sb.AppendLine("}");

            fileStream.Write(Encoding.UTF8.GetBytes(sb.ToString()));
        }

        AssetDatabase.ImportAsset(sourceFilePath);
    }

    /// <summary>
    /// Enumソースファイルを削除する
    /// </summary>
    /// <param name="sharedDataPath"></param>
    /// <param name="tableCollectionName"></param>
    internal static void RemoveSourceFile(string sharedDataPath, string tableCollectionName)
    {
        string sourceFilePath = GetSourceFilePath(sharedDataPath, tableCollectionName);
        AssetDatabase.DeleteAsset(sourceFilePath);
    }
}

class MyAssetPostprocessor : AssetPostprocessor
{
    /// <summary>
    /// SharedTableDataが追加・更新されたときにKeyを連番にしつつEnumソースファイルを生成する
    /// </summary>
    /// <param name="importedAssets"></param>
    /// <param name="deletedAssets"></param>
    /// <param name="movedAssets"></param>
    /// <param name="movedFromAssetPaths"></param>
    // LocalizationEditorSettings.GetStringTableCollections()が最新であることを保証するため[RunAfterPackage]を使用
    [RunAfterPackage("com.unity.localization")]
    static void OnPostprocessAllAssets(
        string[] importedAssets, string[] deletedAssets,
        string[] movedAssets, string[] movedFromAssetPaths)
    {
        try
        {
            AssetDatabase.StartAssetEditing();
            foreach (var assetPath in importedAssets)
            {
                if (assetPath.EndsWith("asset"))
                {
                    var assetType = AssetDatabase.GetMainAssetTypeAtPath(assetPath);
                    if (typeof(SharedTableData).IsAssignableFrom(assetType))
                    {
                        var sharedData = AssetDatabase.LoadAssetAtPath<SharedTableData>(assetPath);
                        LocalizationEnumGenetator.CreateEnumSourceFile(assetPath, sharedData.TableCollectionName, sharedData.Entries);
                    }
                }
            }
        }
        finally
        {
            AssetDatabase.StopAssetEditing();
            AssetDatabase.Refresh();
        }
    }
}

public class LocalizationAssetModificationProcessor : AssetModificationProcessor
{
    /// <summary>
    /// SharedTableDataが削除されたときに生成したEnumソースファイルも一緒に削除する
    /// </summary>
    /// <param name="assetPath"></param>
    /// <param name="_"></param>
    /// <returns></returns>
    public static AssetDeleteResult OnWillDeleteAsset(string assetPath, RemoveAssetOptions _)
    {
        try
        {
            AssetDatabase.StartAssetEditing();

            if (assetPath.EndsWith("asset"))
            {
                var assetType = AssetDatabase.GetMainAssetTypeAtPath(assetPath);
                if (typeof(SharedTableData).IsAssignableFrom(assetType))
                {
                    var sharedData = AssetDatabase.LoadAssetAtPath<SharedTableData>(assetPath);
                    LocalizationEnumGenetator.RemoveSourceFile(assetPath, sharedData.TableCollectionName);
                }
            }
        }
        finally
        {
            AssetDatabase.StopAssetEditing();
            AssetDatabase.Refresh();
        }

        return AssetDeleteResult.DidNotDelete;
    }
}
